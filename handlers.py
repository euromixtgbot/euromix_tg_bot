#!/usr/bin/env python3
import logging
logger = logging.getLogger(__name__)
from datetime import datetime
from telegram import (
    Update, KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from telegram.ext import ContextTypes

from google_sheets_service import (
    get_user_tickets,
    add_ticket,
    identify_user_by_telegram
)

from keyboards import (
    make_keyboard, remove_keyboard, STEPS,
    main_menu_markup, after_create_menu_markup, mytickets_action_markup,
    comment_mode_markup, BUTTONS,
    request_contact_keyboard
)

from services import (
    create_jira_issue,
    attach_file_to_jira,
    add_comment_to_jira,
    get_issue_status,
    get_issue_summary
)

# –°—Ö–æ–≤–∏—â–µ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ø–∞–º'—è—Ç—ñ –ø—Ä–æ—Ü–µ—Å—É
user_data: dict[int, dict] = {}

import logging
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç —Ç–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    user = update.effective_user
    uid = user.id
    uname = user.username or ""

    logger.info(f"[START] User {uid} (@{uname}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")

    # –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    phone = context.user_data.get("pending_phone_check")
    profile = await identify_user_by_telegram(uid, uname, phone)
    context.user_data["profile"] = profile

    if profile:
        fname = profile.get("full_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
        logger.info(f"[START] User {uid} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —è–∫ {fname}")
        await update.message.reply_text(
            f"üëã –í—ñ—Ç–∞—é, {fname}! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=main_menu_markup
        )
    else:
        logger.info(f"[START] User {uid} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
        await update.message.reply_text(
            "üîê –í–∏ —â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:",
            reply_markup=request_contact_keyboard()
        )

    context.user_data['started'] = True


async def mytickets_handler(update, context):
    user_id = update.effective_user.id
    # 1) –î—ñ—Å—Ç–∞—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏‚Äì–∑–∞—è–≤–∫–∏ –∑ Google Sheets
    records =  get_user_tickets(user_id)

    if not records:
        return await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∑–∞—è–≤–æ–∫.",
            reply_markup=main_menu_markup
        )

    # 2) –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ Inline-–∫–Ω–æ–ø–æ–∫ –∑ –∫–ª—é—á–∞–º–∏ —ñ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    buttons = []
    for rec in records:
        issue_key = rec["Ticket_ID"]
        try:
            status = await get_issue_status(issue_key)
        except Exception:
            status = "‚ùì –ø–æ–º–∏–ª–∫–∞"
        buttons.append([InlineKeyboardButton(
            f"{issue_key} ‚Äî {status}",
            callback_data=f"comment_task_{issue_key}"
        )])

    # 3) –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–∏—Å–æ–∫
    await update.message.reply_text(
        "‚úíÔ∏è –û–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def choose_task_for_comment(update, context):
    uid = update.effective_user.id
    tickets =  get_user_tickets(uid)  # Added await to make it asynchronous

    if not tickets:
        return await update.message.reply_text(
            "‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è.",
            reply_markup=main_menu_markup
        )

    # –°–æ—Ä—Ç—É—î–º–æ –π –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10
    sorted_tickets = sorted(
        tickets,
        key=lambda t: t.get("Created_At", ""),
        reverse=True
    )[:10]

    keyboard = []
    for t in sorted_tickets:
        issue_id = t.get("Ticket_ID")
        try:
            status = await get_issue_status(issue_id)
        except Exception:
            status = "‚ùì –ø–æ–º–∏–ª–∫–∞"
        keyboard.append([InlineKeyboardButton(
            f"{issue_id} ‚Äî {status}",
            callback_data=f"comment_task_{issue_id}"
        )])

    await update.message.reply_text(
        "üñãÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∑–∞–¥–∞—á—É, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ç–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# 1) –æ–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –Ω–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É ¬´comment_task_<ID>¬ª
async def handle_comment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑ issue_id:
    1) –î—ñ—Å—Ç–∞—î —Å—Ç–∞—Ç—É—Å —ñ–∑ Jira
    2) –î—ñ—Å—Ç–∞—î summary —ñ–∑ Jira
    3) –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º —ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é comment_mode_markup
    """
    query = update.callback_query
    raw = query.data
    # –æ–±—Ä—ñ–∑–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å "comment_task_"
    issue_id = raw[len("comment_task_"):] if raw.startswith("comment_task_") else raw
    await query.answer()

    # 1) –°—Ç–∞—Ç—É—Å
    status = await get_issue_status(issue_id)
    # 2) Summary
    summary = await get_issue_summary(issue_id)

    # 3) –ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ
    await query.message.reply_text(
        f"‚úçÔ∏è –ó–∞–¥–∞—á–∞ {issue_id} - —Å—Ç–∞—Ç—É—Å: {status}\n"
        f"Summary: {summary}\n"
        "____\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–¥–∞—á—ñ, —á–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ùå –¥–ª—è –≤–∏—Ö–æ–¥—É.",
        reply_markup=comment_mode_markup
    )

    # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è
    # —Å—Ç–∞–≤–∏–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—é—á –∑–∞–¥–∞—á—ñ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    context.user_data["user_comment_mode"] = True
    context.user_data["comment_task_id"] = issue_id


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_to_jira(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –§–æ—Ä–º—É—î payload –∑ —É—Å—å–æ–≥–æ, —â–æ –Ω–∞–∫–æ–ø–∏—á–∏–ª–æ—Å—å —É context.user_data + profile,
    –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤ Jira, –∑–∞–Ω–æ—Å–∏—Ç—å —É Google Sheets —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ–Ω—é.
    """
    user = update.effective_user
    uid = user.id
    profile = context.user_data.get("profile", {})

    # –§–æ—Ä–º—É—î–º–æ –æ–ø–∏—Å –∑–∞–¥–∞—á—ñ
    description = (
        f"–ü–Ü–ë: {profile.get('full_name', '-')}\n"
        f"–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {profile.get('division', '-')}\n"
        f"–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {profile.get('department', '-')}\n"
        f"–°–µ—Ä–≤—ñ—Å: {context.user_data.get('service', '-')}\n"
        f"–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏: {context.user_data.get('description', '-')}\n\n"
        f"tg id: {uid}\n"
        f"tg username: {user.username or '-'}\n"
        f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

    payload = {
        "summary": f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {profile.get('full_name', '-')}",
        "description": description,
        # —è–∫—â–æ —î —ñ–Ω—à—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è, –¥–æ–¥–∞–π—Ç–µ —ó—Ö —Å—é–¥–∏
    }

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—É –≤ Jira
        issue_key = await create_jira_issue(payload["summary"], payload["description"])
        # –ó–∞–Ω–æ—Å–∏–º–æ –∑–∞–ø–∏—Å —É Google Sheets
        await add_ticket({
            "issue_key": issue_key,
            "telegram_user_id": uid,
            "telegram_chat_id": update.effective_chat.id,
            "telegram_username": user.username or ""
        })
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {issue_key}",
            reply_markup=main_menu_markup
        )
    except Exception as e:
        logger.exception(f"[JIRA] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ: {e}")
        await update.message.reply_text(
            "‚õî –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
            reply_markup=main_menu_markup
        )


async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    logger.info(f"[MEDIA] User {uid} (@{user.username or '-'}, {user.first_name}) –Ω–∞–¥—Å–∏–ª–∞—î –º–µ–¥—ñ–∞")
    if uid not in user_data or "task_id" not in user_data[uid]:
        await update.message.reply_text(
            "‚ùó –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É', –∞ –ø–æ—Ç—ñ–º –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–∞–π–ª–∏."
        )
        return

    tid = user_data[uid]["task_id"]
    file_obj = None
    filename = None

    # –±—É–¥—å-—è–∫–∏–π —Ç–∏–ø media/document/photo/video/audio
    if update.message.document:
        file_obj = update.message.document
        filename = file_obj.file_name
    elif update.message.photo:
        file_obj = update.message.photo[-1]
        filename = f"photo_{datetime.now().strftime('%H%M%S')}.jpg"
    elif update.message.video:
        file_obj = update.message.video
        filename = file_obj.file_name or f"video_{file_obj.file_id}.mp4"
    elif update.message.audio:
        file_obj = update.message.audio
        filename = file_obj.file_name or f"audio_{file_obj.file_id}.mp3"
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É.")
        return

    # –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ bytes
    f = await context.bot.get_file(file_obj.file_id)
    content = await f.download_as_bytearray()
    resp = await attach_file_to_jira(tid, filename, content)
    if resp.status_code in (200, 201):
        await update.message.reply_text(f"‚úÖ '{filename}' –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ")
    else:
        await update.message.reply_text(
            f"‚õî –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {resp.status_code}"
        )

async def add_comment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    logger.info(f"[COMMENT] User {uid} (@{user.username or '-'}, {user.first_name}) –¥–æ–¥–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä")

    if not context.user_data.get("user_comment_mode"):
        return  # –Ω–µ –≤ —Ä–µ–∂–∏–º—ñ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ

    text = update.message.text.strip()

    # 1) –í–∏—Ö—ñ–¥ —ñ–∑ —Ä–µ–∂–∏–º—É
    if text == BUTTONS["exit_comment"]:
        context.user_data["user_comment_mode"] = False
        context.user_data["comment_task_id"] = None
       
        await update.message.reply_text(
            "üîô –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è.",
            reply_markup=main_menu_markup
        )
        return

    # 2) –í–ª–∞—Å–Ω–µ –∫–æ–º–µ–Ω—Ç–∞—Ä
    task_id = context.user_data.get("comment_task_id")
    if not task_id:
        # —è–∫—â–æ —Ä–∞–ø—Ç–æ–º –Ω–µ–º–∞—î –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–∏—Ö–æ–¥–∏–º–æ
        context.user_data["user_comment_mode"] = False
        return

    resp = await add_comment_to_jira(task_id, text)

    if resp.status_code == 201:
        await update.message.reply_text(
            f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–¥–∞—á—ñ {task_id}\n\n"
            "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –ø–∏—Å–∞—Ç–∏ –Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ üîô –¥–ª—è –≤–∏—Ö–æ–¥—É.",
            reply_markup=comment_mode_markup
        )
        return
    else:
        await update.message.reply_text(
            f"‚õî –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {resp.status_code}\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å üîô –¥–ª—è –≤–∏—Ö–æ–¥—É.",
            reply_markup=comment_mode_markup
        )
        return

async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    tid = user_data.get(uid, {}).get("task_id")
    if not tid:
        await update.message.reply_text("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ.")
        logger.info(f"[STATUS] User {uid} (@{user.username or '-'}, {user.first_name}) ‚Äî –Ω–µ–º–∞—î –∑–∞–¥–∞—á—ñ")
        return
    try:
        st = await get_issue_status(tid)
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å {tid}: {st}")
        logger.info(f"[STATUS] User {uid} (@{user.username or '-'}, {user.first_name}) ‚Äî —Å—Ç–∞—Ç—É—Å: {st}")
    except Exception as e:
        logger.exception(f"[STATUS] User {uid} (@{user.username or '-'}, {user.first_name}) ‚Äî –ø–æ–º–∏–ª–∫–∞: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏."""
    text = update.message.text or ""
    step = context.user_data.get("step")

    if step is not None:
        # 1) –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        key = STEPS[step]
        context.user_data[key] = text

        # 2) —è–∫—â–æ –º–∏ —â–æ–π–Ω–æ –æ—Ç—Ä–∏–º–∞–ª–∏ description (–æ—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫) ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥
        if step == len(STEPS) - 1:
            profile = context.user_data["profile"] or {}
            summary = (
                f"*–û–ø–∏—Å –∑–∞—è–≤–∫–∏:*  \n"
                f"–ü–Ü–ë: {profile.get('full_name', '-') }  \n"
                f"–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {profile.get('division','-')}  \n"
                f"–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {profile.get('department','-')}  \n"
                f"–°–µ—Ä–≤—ñ—Å: {context.user_data.get('service','-')}  \n"
                f"–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏: {context.user_data.get('description','-')}  \n\n"
                f"tg id: {update.effective_user.id}  \n"
                f"tg username: {update.effective_user.username or '-'}  \n"
                f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            # –∫–Ω–æ–ø–∫–∏ ¬´–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É¬ª —Ç–∞ ¬´–ù–∞–∑–∞–¥¬ª
            await update.message.reply_text(
                summary,
                parse_mode="Markdown",
                reply_markup=after_create_menu_markup
            )
            # —Å–∫–∏–¥–∞—î–º–æ step, —â–æ–± –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –æ–±—Ä–æ–±–ª—è–ª–∞—Å—è —è–∫ –º–µ–Ω—é
            context.user_data.pop("step")
            return

        # 3) –æ–±—á–∏—Å–ª—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫
        # –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö: –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ full_name (–∫—Ä–æ–∫ 2) ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –æ–¥—Ä–∞–∑—É –¥–æ service (–∫—Ä–æ–∫ 3)
        if context.user_data.get("profile") and step == 1:
            next_step = 3
        else:
            next_step = step + 1

        context.user_data["step"] = next_step
        prompt, markup = make_keyboard(next_step, context.user_data.get("description",""))
        await update.message.reply_text(prompt, reply_markup=markup)
        return

    # —è–∫—â–æ step –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π ‚Äî —Ü–µ –Ω–µ —Ñ–æ—Ä–º–∞, —Ç–æ–º—É –Ω–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞
    await update.message.reply_text(
        "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:",
        reply_markup=main_menu_markup
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    text = update.message.text or ""
    logger.info(f"[UNIVERSAL] User {uid} (@{user.username or '-'}, {user.first_name}) sent: {text}")

    # 0Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
    if text == BUTTONS["check_status"]:
        await check_status(update, context)
        return

    # 1Ô∏è‚É£ –ë—É–¥—å-—è–∫–µ –º–µ–¥—ñ–∞
    if update.message.document or update.message.photo or update.message.video or update.message.audio:
        await handle_media(update, context)
        return

    # 2Ô∏è‚É£ –†–µ–∂–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    if context.user_data.get("user_comment_mode"):
        if text == BUTTONS["exit_comment"]:
            context.user_data["user_comment_mode"] = False
            context.user_data["comment_task_id"] = None
            await update.message.reply_text(
                "üîô –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è.",
                reply_markup=main_menu_markup
            )
        else:
            await add_comment_handler(update, context)
        return

    # 3Ô∏è‚É£ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if text == BUTTONS["help"]:
        await start(update, context)
    elif text == BUTTONS["my_tickets"]:
        await mytickets_handler(update, context)

    # 4Ô∏è‚É£ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É
    elif text == BUTTONS["create_ticket"]:
        # —è–∫—â–æ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ ‚Äî —Å—Ç—Ä–∏–±–∞—î–º–æ division & department & full_name
        start_step = 2 if context.user_data.get("profile") else 0
        context.user_data["step"] = start_step
        prompt, markup = make_keyboard(start_step)
        await update.message.reply_text(prompt, reply_markup=markup)
        # —è–∫—â–æ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ ‚Äî —Å—Ç—Ä–∏–±–∞—î–º–æ division, department, full_name
        profile = context.user_data.get("profile")
        if profile:
            # –ø—ñ–¥—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∑ –ø—Ä–æ—Ñ—ñ–ª—é
            context.user_data["division"]   = profile.get("division")
            context.user_data["department"] = profile.get("department")
            context.user_data["full_name"]  = profile.get("full_name")
            start_step = 2  # 0=division, 1=department, 2=service
        else:
            start_step = 0

        context.user_data["step"] = start_step
        prompt, markup = make_keyboard(start_step)
        await update.message.reply_text(prompt, reply_markup=markup)

    # 5Ô∏è‚É£ –ü–æ–∫–∞–∑–∞—Ç–∏ —Ñ–æ—Ä–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    elif text == BUTTONS["add_comment"]:
        await choose_task_for_comment(update, context)

    # 6Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ
    elif text == BUTTONS["confirm"]:
        await send_to_jira(update, context)

    # 7Ô∏è‚É£ ¬´–ù–∞–∑–∞–¥¬ª —É —Ñ–æ—Ä–º—ñ (—è–∫—â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ —Ç–∞–∫—É –∫–Ω–æ–ø–∫—É)
    elif text == BUTTONS.get("back"):
        prev = max(0, context.user_data.get("step", 1) - 1)
        context.user_data["step"] = prev
        prompt, markup = make_keyboard(prev, context.user_data.get("description",""))
        await update.message.reply_text(prompt, reply_markup=markup)

    else:
        # –±—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π —Ç–µ–∫—Å—Ç ‚Äî —É –∑–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
        await handle_message(update, context)


async def exit_comment_mode(update: Update, uid: int):
    # –í–∏–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    user_data[uid]["user_comment_mode"] = False
    user_data[uid]["comment_task_id"] = None
    await update.message.reply_text(
        "üîô –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è.",
        reply_markup=main_menu_markup
    )
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    uname = user.username or ""
    phone = update.message.contact.phone_number

    logger.info(f"[CONTACT] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä {phone} –≤—ñ–¥ UID={uid}, @{uname}")

    try:
        profile = await identify_user_by_telegram(uid, uname, phone)
        if profile:
            context.user_data["started"] = True
            context.user_data["profile"] = profile
            context.user_data.pop("pending_phone_check", None)  # –í–∏–¥–∞–ª—è—î–º–æ pending_phone_check
            fname = profile.get("full_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
            await update.message.reply_text(
                f"‚úÖ –í—ñ—Ç–∞—î–º–æ, {fname}! –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.",
                reply_markup=main_menu_markup
            )
        else:
            await update.message.reply_text(
                "‚õî –ù–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=ReplyKeyboardMarkup(
                    [
                        [KeyboardButton(BUTTONS["continue_unauthorized"])],
                        [KeyboardButton(BUTTONS["restart"])]
                    ],
                    resize_keyboard=True
                )
            )
    except Exception as e:
        logger.exception(f"[CONTACT] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
