#!/usr/bin/env python3
import logging
logger = logging.getLogger(__name__)
from datetime import datetime
from telegram import (
    Update, KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from telegram.ext import ContextTypes

from google_sheets_service import (
    get_user_tickets,
    add_ticket,
    identify_user_by_telegram
)

from keyboards import (
    make_keyboard, remove_keyboard, STEPS,
    main_menu_markup, after_create_menu_markup, mytickets_action_markup,
    comment_mode_markup, BUTTONS,
    request_contact_keyboard
)

from services import (
    create_jira_issue,
    attach_file_to_jira,
    add_comment_to_jira,
    get_issue_status
)

# –°—Ö–æ–≤–∏—â–µ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ø–∞–º'—è—Ç—ñ –ø—Ä–æ—Ü–µ—Å—É
user_data: dict[int, dict] = {}

import logging
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç —Ç–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    user = update.effective_user
    uid = user.id
    uname = user.username or ""

    logger.info(f"[START] User {uid} (@{uname}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")

    # –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    phone = context.user_data.get("pending_phone_check")
    profile = await identify_user_by_telegram(uid, uname, phone)
    context.user_data["profile"] = profile

    if profile:
        fname = profile.get("full_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
        logger.info(f"[START] User {uid} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —è–∫ {fname}")
        await update.message.reply_text(
            f"üëã –í—ñ—Ç–∞—é, {fname}! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=main_menu_markup
        )
    else:
        logger.info(f"[START] User {uid} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
        await update.message.reply_text(
            "üîê –í–∏ —â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:",
            reply_markup=request_contact_keyboard()
        )

    context.user_data['started'] = True

async def mytickets_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
    uid = update.effective_user.id
    tickets = await get_issue_status(uid)

    if not tickets:
        await update.message.reply_text("‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫.")
        return

    await update.message.reply_text(
        "–í–∞—à—ñ –∑–∞—è–≤–∫–∏:\n" + "\n".join(tickets),
        reply_markup=mytickets_action_markup
    )

async def choose_task_for_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    tickets = get_user_tickets(uid)

    if not tickets:
        await update.message.reply_text("‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è.", reply_markup=None)
        return

    # –í—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é —ñ –≤–∑—è—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10
    sorted_tickets = sorted(
        tickets,
        key=lambda t: t.get("Created_At", ""),
        reverse=True
    )[:10]

    buttons = []
    for t in sorted_tickets:
        issue_id = t.get("Ticket_ID", "N/A")
        try:
            status = await get_issue_status(issue_id)
        except Exception:
            status = "‚ùì –ø–æ–º–∏–ª–∫–∞"
        label = f"{issue_id} ‚Äî {status}"
        buttons.append([InlineKeyboardButton(label, callback_data=f"comment_task_{issue_id}")])

    markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(
        "üñãÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∑–∞–¥–∞—á—É —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ —ñ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä:",
        reply_markup=markup
    )

# 1) –æ–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –Ω–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É ¬´comment_task_<ID>¬ª
async def handle_comment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.edit_reply_markup(reply_markup=None)

    uid = query.from_user.id
    task_id = query.data.replace("comment_task_", "", 1)

    user_data.setdefault(uid, {})
    user_data[uid]["user_comment_mode"] = True
    user_data[uid]["comment_task_id"] = task_id

    # –ó–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä—à–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä + –∫–Ω–æ–ø–∫–∞ ‚ùå
    await query.message.reply_text(
        f"‚úçÔ∏è –í–∏ –ø–∏—à–µ—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ {task_id}.\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ùå –¥–ª—è –≤–∏—Ö–æ–¥—É.",
        reply_markup=comment_mode_markup
    )

async def add_comment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç —É —Ä–µ–∂–∏–º—ñ –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è.
    –Ø–∫—â–æ text == BUTTONS['exit_comment'] ‚Äî –≤–∏—Ö–æ–¥–∏—Ç—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é,
    —ñ–Ω–∞–∫—à–µ ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ–º–µ–Ω—Ç–∞—Ä —ñ –ª–∏—à–∞—î—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º—ñ.
    """
    user = update.effective_user
    uid = user.id
    logger.info(f"[COMMENT] User {uid} (@{user.username or '-'}, {user.first_name}) –¥–æ–¥–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä")

    if not user_data.get(uid, {}).get("user_comment_mode"):
        return  # –Ω–µ –≤ —Ä–µ–∂–∏–º—ñ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ

    text = update.message.text

    # 1) –í–∏—Ö—ñ–¥ —ñ–∑ —Ä–µ–∂–∏–º—É
    if text == BUTTONS["exit_comment"]:
        user_data[uid]["user_comment_mode"] = False
        user_data[uid]["comment_task_id"] = None
        await update.message.reply_text(
            "üîô –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è.",
            reply_markup=main_menu_markup
        )
        return

    # 2) –í–ª–∞—Å–Ω–µ –∫–æ–º–µ–Ω—Ç–∞—Ä
    task_id = user_data[uid].get("comment_task_id")
    if not task_id:
        # —è–∫—â–æ —Ä–∞–ø—Ç–æ–º –Ω–µ–º–∞—î –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–∏—Ö–æ–¥–∏–º–æ
        user_data[uid]["user_comment_mode"] = False
        return

    resp = await add_comment_to_jira(task_id, text)

    if resp.status_code == 201:
        await update.message.reply_text(
            f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–¥–∞—á—ñ {task_id}\n\n"
            "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –ø–∏—Å–∞—Ç–∏ –Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ‚ùå –¥–ª—è –≤–∏—Ö–æ–¥—É.",
            reply_markup=comment_mode_markup
        )
    else:
        await update.message.reply_text(
            f"‚õî –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {resp.status_code}\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ùå –¥–ª—è –≤–∏—Ö–æ–¥—É.",
            reply_markup=comment_mode_markup
        )
async def send_to_jira(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–≤–æ—Ä—é—î –∑–∞–¥–∞—á—É –≤ Jira —ñ –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é after_create"""
    user = update.effective_user
    uid = user.id
    logger.info(f"[JIRA] User {uid} —Å—Ç–≤–æ—Ä—é—î –∑–∞–¥–∞—á—É")

    # –§–æ—Ä–º—É—î–º–æ payload –¥–ª—è Jira
    payload = {
        "summary": context.user_data.get("summary"),
        "description": context.user_data.get("description"),
        # —ñ–Ω—à—ñ –ø–æ–ª—è‚Ä¶
    }
    issue_key = await create_jira_issue(payload)

    # –î–æ–¥–∞—î–º–æ –∑–∞–¥–∞—á—É –≤ Google Sheets
    await add_ticket({
        "issue_key": issue_key,
        "telegram_user_id": uid,
        "telegram_chat_id": update.effective_chat.id,
        "telegram_username": user.username
    })

    await update.message.reply_text(
        f"‚úÖ –ó–∞–¥–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {issue_key}",
        reply_markup=after_create_menu_markup
    )

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    logger.info(f"[MEDIA] User {uid} (@{user.username or '-'}, {user.first_name}) –Ω–∞–¥—Å–∏–ª–∞—î –º–µ–¥—ñ–∞")
    if uid not in user_data or "task_id" not in user_data[uid]:
        await update.message.reply_text(
            "‚ùó –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É', –∞ –ø–æ—Ç—ñ–º –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–∞–π–ª–∏."
        )
        return

    tid = user_data[uid]["task_id"]
    file_obj = None
    filename = None

    # –±—É–¥—å-—è–∫–∏–π —Ç–∏–ø media/document/photo/video/audio
    if update.message.document:
        file_obj = update.message.document
        filename = file_obj.file_name
    elif update.message.photo:
        file_obj = update.message.photo[-1]
        filename = f"photo_{datetime.now().strftime('%H%M%S')}.jpg"
    elif update.message.video:
        file_obj = update.message.video
        filename = file_obj.file_name or f"video_{file_obj.file_id}.mp4"
    elif update.message.audio:
        file_obj = update.message.audio
        filename = file_obj.file_name or f"audio_{file_obj.file_id}.mp3"
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É.")
        return

    # –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ bytes
    f = await context.bot.get_file(file_obj.file_id)
    content = await f.download_as_bytearray()
    resp = await attach_file_to_jira(tid, filename, content)
    if resp.status_code in (200, 201):
        await update.message.reply_text(f"‚úÖ '{filename}' –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ")
    else:
        await update.message.reply_text(
            f"‚õî –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {resp.status_code}"
        )

async def add_comment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    logger.info(f"[COMMENT] User {uid} (@{user.username or '-'}, {user.first_name}) –¥–æ–¥–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä")

    if not user_data.get(uid, {}).get("user_comment_mode"):
        return  # –Ω–µ –≤ —Ä–µ–∂–∏–º—ñ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ

    text = update.message.text.strip()

    # 1) –í–∏—Ö—ñ–¥ —ñ–∑ —Ä–µ–∂–∏–º—É
    if text == BUTTONS["exit_comment"]:
        user_data[uid]["user_comment_mode"] = False
        user_data[uid]["comment_task_id"] = None
        await update.message.reply_text(
            "üîô –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è.",
            reply_markup=main_menu_markup
        )
        return

    # 2) –í–ª–∞—Å–Ω–µ –∫–æ–º–µ–Ω—Ç–∞—Ä
    task_id = user_data[uid].get("comment_task_id")
    if not task_id:
        # —è–∫—â–æ —Ä–∞–ø—Ç–æ–º –Ω–µ–º–∞—î –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–∏—Ö–æ–¥–∏–º–æ
        user_data[uid]["user_comment_mode"] = False
        return

    resp = await add_comment_to_jira(task_id, text)

    if resp.status_code == 201:
        await update.message.reply_text(
            f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–¥–∞—á—ñ {task_id}\n\n"
            "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –ø–∏—Å–∞—Ç–∏ –Ω–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ üîô –¥–ª—è –≤–∏—Ö–æ–¥—É.",
            reply_markup=comment_mode_markup
        )
    else:
        await update.message.reply_text(
            f"‚õî –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {resp.status_code}\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å üîô –¥–ª—è –≤–∏—Ö–æ–¥—É.",
            reply_markup=comment_mode_markup
        )

async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    tid = user_data.get(uid, {}).get("task_id")
    if not tid:
        await update.message.reply_text("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ.")
        logger.info(f"[STATUS] User {uid} (@{user.username or '-'}, {user.first_name}) ‚Äî –Ω–µ–º–∞—î –∑–∞–¥–∞—á—ñ")
        return
    try:
        st = await get_issue_status(tid)
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å {tid}: {st}")
        logger.info(f"[STATUS] User {uid} (@{user.username or '-'}, {user.first_name}) ‚Äî —Å—Ç–∞—Ç—É—Å: {st}")
    except Exception as e:
        logger.exception(f"[STATUS] User {uid} (@{user.username or '-'}, {user.first_name}) ‚Äî –ø–æ–º–∏–ª–∫–∞: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    text = update.message.text

    # –í–∏—Ö—ñ–¥ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if text == BUTTONS["exit"]:
        return await start(update, context)

    # –ú–æ—ó –∑–∞—è–≤–∫–∏
    if text == BUTTONS["my_tickets"]:
        return await mytickets_handler(update, context)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
    if text == BUTTONS["check_status"]:
        issue_id = context.user_data.get("last_created_issue")
        status = await get_issue_status(issue_id)
        return await update.message.reply_text(
            f"–°—Ç–∞—Ç—É—Å {issue_id}: {status}",
            reply_markup=after_create_menu_markup
        )

    # –†–µ–∂–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    if context.user_data.get("in_comment_mode"):
        # ‚Ä¶ –æ–±—Ä–æ–±–∫–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è ‚Ä¶
        return

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞—è–≤–∫–∏
    if text == BUTTONS["create_ticket"]:
        context.user_data["step"] = 0
        prompt, markup = make_keyboard(0)
        return await update.message.reply_text(prompt, reply_markup=markup)

    # –Ü–Ω—à–∞ –ª–æ–≥—ñ–∫–∞: –æ–±—Ä–æ–±–∫–∞ STEPS, confirm —Ç–æ—â–æ‚Ä¶
    step = context.user_data.get("step")
    if step is not None:
        prompt, markup = make_keyboard(step, context.user_data.get("description", ""))
        # ‚Ä¶ –æ–Ω–æ–≤–ª—é—î–º–æ step, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ ‚Ä¶
        return await update.message.reply_text(prompt, reply_markup=markup)

    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî –Ω–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞/—Ç–µ–∫—Å—Ç
    await update.message.reply_text(
        "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:",
        reply_markup=main_menu_markup
    )

async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    text = update.message.text or ""
    logger.info(f"[UNIVERSAL] User {uid} (@{user.username or '-'}, {user.first_name}) –Ω–∞–¥—ñ—Å–ª–∞–≤: {text}")

    # 0Ô∏è‚É£ –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–Ω–æ–ø–∫–∏, —è–∫—ñ –º–∞—é—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    if text == BUTTONS["check_status"]:
        await check_status(update, context)
        return  # –í–∞–∂–ª–∏–≤–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏

    # 1Ô∏è‚É£ –Ø–∫—â–æ –º–µ–¥—ñ–∞ ‚Äî –ø–µ—Ä–µ–¥–∞—î–º–æ –≤ handle_media
    if update.message.document or update.message.photo or update.message.video or update.message.audio:
        await handle_media(update, context)
        return

    # 2Ô∏è‚É£ –†–µ–∂–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    if user_data.get(uid, {}).get("user_comment_mode"):
        if text == BUTTONS["exit_comment"]:
            # EXIT: –≤–∏–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            user_data[uid]["user_comment_mode"] = False
            user_data[uid]["comment_task_id"] = None
            await update.message.reply_text(
                "üîô –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è.",
                reply_markup=main_menu_markup
            )
        else:
            # –±—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π —Ç–µ–∫—Å—Ç ‚Äî –¥–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä
            await add_comment_handler(update, context)
        return

    # 3Ô∏è‚É£ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ª–æ–≥—ñ–∫–∞
    if text == BUTTONS["help"]:
        await start(update, context)
    elif text == BUTTONS["my_tickets"]:
        await mytickets_handler(update, context)
    elif text == BUTTONS["create_ticket"]:
        user_data[uid] = {"step": 0}
        txt, markup = make_keyboard(0)
        await update.message.reply_text(txt, reply_markup=markup)
    elif text == BUTTONS["add_comment"]:
        await choose_task_for_comment(update, context)
    elif text == BUTTONS["continue_unauthorized"]:
        user_data[uid] = {"step": 0}
        await update.message.reply_text(
            "üìã –í–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–ª–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ú–µ–Ω—é –¥—ñ–π:",
            reply_markup=mytickets_action_markup
        )
        return
    elif text == BUTTONS["restart"]:
        await start(update, context)
        return
    elif user_data.get(uid, {}).get("task_id"):
        await add_comment_handler(update, context)
    else:
        await handle_message(update, context)

async def exit_comment_mode(update: Update, uid: int):
    # –í–∏–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    user_data[uid]["user_comment_mode"] = False
    user_data[uid]["comment_task_id"] = None
    await update.message.reply_text(
        "üîô –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è.",
        reply_markup=main_menu_markup
    )
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    uname = user.username or ""
    phone = update.message.contact.phone_number

    logger.info(f"[CONTACT] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä {phone} –≤—ñ–¥ UID={uid}, @{uname}")

    try:
        profile = await identify_user_by_telegram(uid, uname, phone)
        if profile:
            context.user_data["started"] = True
            context.user_data["profile"] = profile
            context.user_data.pop("pending_phone_check", None)  # –í–∏–¥–∞–ª—è—î–º–æ pending_phone_check
            fname = profile.get("full_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
            await update.message.reply_text(
                f"‚úÖ –í—ñ—Ç–∞—î–º–æ, {fname}! –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.",
                reply_markup=main_menu_markup
            )
        else:
            await update.message.reply_text(
                "‚õî –ù–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=ReplyKeyboardMarkup(
                    [
                        [KeyboardButton(BUTTONS["continue_unauthorized"])],
                        [KeyboardButton(BUTTONS["restart"])]
                    ],
                    resize_keyboard=True
                )
            )
    except Exception as e:
        logger.exception(f"[CONTACT] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
